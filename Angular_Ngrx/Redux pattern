Components don't put the information in to the store, rather they dispatch an action for the reducer to update the store. 
Components don't read the information from the store, then they use selector to recieve state change notfications.
Since all the components, get the information from single source of touth (store)..

Ngrx has tools to view our list of actions and state, making it much easier to see what's going on in the application.

Use Ngrx for follwoing cases: 
-----------------------------
1. Store provides a place for U.I state to reatain it between router views
2. When there are excessive http requests, store provides client side cache 
3. For complex component interactions, the reducer updates the store and store updaets all the notifiers.

Redux is not just for Angular, almost all front end frameworks use this statemenagnet library. 
by using redux we can build predictable state containers for javascript apps. 

Three principles
-----------------
1. There is only one single source of truth ( that is application state) Store
2. State is readonly, and the only way to change is by dispatching action 
3. Changes to the store are made using pure functions called reducers. 



Action : 
Reducer : Takes the stae from the store if already exists and creates a new state (as it is immutable)
Store (local store) State : is a tree like object (which organises in to moudles and properties)
you need to install @ngrx/store package
  Import {StoreModule} from 'ngrx/store';

@NgMoudle({
Imports : [BrowserModule, 
RouterModule.forRoot(),
StoreModule.forRoot()
]
})
export class AppModule
{
}

Selector : 
